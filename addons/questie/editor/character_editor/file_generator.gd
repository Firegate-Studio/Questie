class_name CharactersFileGenerator

const FILE_PATH = "res://questie/characters.generated.gd"
const HEADER = "# this is an autogenerated file - does not try to modify it manually, use the character editor instead!"
const CLASS_DEFINITION = "class_name GameCharacters \n "
const SPACE = "\n"
const ENUMARATION_HEADER = "# A list of all characters"
const ENUMARATION_NAME = "Characters"
const CHARACTERS_MAP_HEADER = "# A dictionary containing the characters identifiers associated to the character enumaration"
const CHARACTERS_MAP_NAME = "characters_map"

# create an initial file
static func create():
	
	var file = File.new()
	file.open(FILE_PATH, File.WRITE)
	file.store_string(HEADER + SPACE)
	file.store_string(CLASS_DEFINITION + SPACE)
	file.store_string(ENUMARATION_HEADER + SPACE)
	file.store_string("enum " + ENUMARATION_NAME + "{}" + SPACE)
	file.store_string(SPACE)
	file.store_string(CHARACTERS_MAP_HEADER + SPACE)
	file.store_string("const characters_map = {}" + SPACE)
	file.close()

static func compile(): 

	# the character database
	var database = load("res://questie/characters-db.tres")

	var file = File.new()

	file.open(FILE_PATH, File.WRITE)
	file.store_string(HEADER + SPACE)
	file.store_string(CLASS_DEFINITION + SPACE)
	
	# generate enumerations
	file.store_string(ENUMARATION_HEADER + SPACE)
	file.store_string("enum " + ENUMARATION_NAME + "{" + SPACE)
	for character in database.characters:
		var name = convert_string_to_enumeration_name(character.title)
		file.store_string(name + "," + SPACE)
	file.store_string("}" + SPACE)
	
	file.store_string(SPACE)

	# generate characters map
	file.store_string(CHARACTERS_MAP_HEADER + SPACE)
	file.store_string("const " + CHARACTERS_MAP_NAME + " = {" + SPACE)
	for character in database.characters:
		file.store_string(generate_map_row(convert_string_to_enumeration_name(character.title), character.id)+"," + SPACE)
	file.store_string("}" + SPACE)
	
	file.close()

static func convert_string_to_enumeration_name(word)->String:
	var result = word
	result.capitalize()

	# change spaces with underscores
	while(result.find(" ") > -1):
		var index = result.find(" ")
		result[index]="_"

	return result

static func generate_map_row(enumeration_name, character_id):
	var template = "{0} : {1}"

	var title = ENUMARATION_NAME + "." + enumeration_name
	var source = template.format([title, var2str(character_id)])
	print(source)
	
	return source 

